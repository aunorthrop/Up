import { useState, useEffect, useCallback } from 'react';
import { api } from '../services/api';
import toast from 'react-hot-toast';

export const useSync = () => {
  const [syncStatus, setSyncStatus] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchSyncStatus = useCallback(async () => {
    try {
      setLoading(true);
      const response = await api.get('/sync/status');
      setSyncStatus(response.data);
      setError(null);
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to fetch sync status');
      toast.error('Failed to fetch sync status');
    } finally {
      setLoading(false);
    }
  }, []);

  const triggerManualSync = useCallback(async () => {
    try {
      setLoading(true);
      const response = await api.post('/sync/trigger');
      toast.success('Manual sync triggered successfully');
      
      // Refresh status after triggering sync
      setTimeout(() => {
        fetchSyncStatus();
      }, 1000);
      
      return response.data;
    } catch (err) {
      const errorMessage = err.response?.data?.error || 'Failed to trigger sync';
      setError(errorMessage);
      toast.error(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [fetchSyncStatus]);

  const updateSyncSettings = useCallback(async (settings) => {
    try {
      setLoading(true);
      const response = await api.put('/sync/settings', settings);
      toast.success('Sync settings updated successfully');
      
      // Refresh status to get updated settings
      fetchSyncStatus();
      
      return response.data;
    } catch (err) {
      const errorMessage = err.response?.data?.error || 'Failed to update settings';
      setError(errorMessage);
      toast.error(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [fetchSyncStatus]);

  const getSyncHistory = useCallback(async (page = 1, limit = 20) => {
    try {
      const response = await api.get('/sync/history', {
        params: { page, limit }
      });
      return response.data;
    } catch (err) {
      const errorMessage = err.response?.data?.error || 'Failed to fetch sync history';
      setError(errorMessage);
      toast.error(errorMessage);
      throw err;
    }
  }, []);

  // Auto-refresh sync status every 30 seconds
  useEffect(() => {
    fetchSyncStatus();
    const interval = setInterval(fetchSyncStatus, 30000);
    return () => clearInterval(interval);
  }, [fetchSyncStatus]);

  return {
    syncStatus,
    loading,
    error,
    fetchSyncStatus,
    triggerManualSync,
    updateSyncSettings,
    getSyncHistory,
  };
};
